@inproceedings{hawblitzel2015ironfleet,
	author = {Hawblitzel, Chris and Howell, Jon and Kapritsos, Manos and Lorch, Jay and Parno, Bryan and Stephenson, Justine and Setty, Srinath and Zill, Brian},
	title = {IronFleet: Proving Practical Distributed Systems Correct},
	booktitle = {Proceedings of the ACM Symposium on Operating Systems Principles (SOSP)},
	year = {2015},
	month = {October},
	abstract = {Distributed systems are notorious for harboring subtle bugs. Verification can, in principle, eliminate these bugs a priori, but verification has historically been difficult to apply at full-program scale, much less distributed-system scale.

		We describe a methodology for building practical and provably correct distributed systems based on a unique blend of TLA-style state-machine refinement and Hoare-logic verification. We demonstrate the methodology on a complex implementation of a Paxos-based replicated state machine library and a lease-based sharded key-value store. We prove that each obeys a concise safety specification, as well as desirable liveness requirements. Each implementation achieves performance competitive with a reference system. With our methodology and lessons learned, we aim to raise the standard for distributed systems from "tested" to "correct."},
	publisher = {ACM - Association for Computing Machinery},
	url = {https://www.microsoft.com/en-us/research/publication/ironfleet-proving-practical-distributed-systems-correct/},
	edition = {Proceedings of the ACM Symposium on Operating Systems Principles (SOSP)},
}

@inproceedings{haojun2019i4,
	author = {Ma, Haojun and Goel, Aman and Jeannin, Jean-Baptiste and Kapritsos, Manos and Kasikci, Baris and Sakallah, Karem A.},
	title = {I4: Incremental Inference of Inductive Invariants for Verification of Distributed Protocols},
	year = {2019},
	isbn = {9781450368735},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3341301.3359651},
	doi = {10.1145/3341301.3359651},
	abstract = {Designing and implementing distributed systems correctly is a very challenging task. Recently, formal verification has been successfully used to prove the correctness of distributed systems. At the heart of formal verification lies a computer-checked proof with an inductive invariant. Finding this inductive invariant, however, is the most difficult part of the proof. Alas, current proof techniques require inductive invariants to be found manually---and painstakingly---by the developer.In this paper, we present a new approach, Incremental Inference of Inductive Invariants (I4), to automatically generate inductive invariants for distributed protocols. The essence of our idea is simple: the inductive invariant of a finite instance of the protocol can be used to infer a general inductive invariant for the infinite distributed protocol. In I4, we create a finite instance of the protocol; use a model checking tool to automatically derive the inductive invariant for this finite instance; and generalize this invariant to an inductive invariant for the infinite protocol. Our experiments show that I4 can prove the correctness of several distributed protocols like Chord, 2PC and Transaction Chains with little to no human effort.},
	booktitle = {Proceedings of the 27th ACM Symposium on Operating Systems Principles},
	pages = {370–384},
	numpages = {15},
	location = {Huntsville, Ontario, Canada},
	series = {SOSP '19}
}

@inproceedings{padon2016ivy,
	author = {Padon, Oded and McMillan, Kenneth L. and Panda, Aurojit and Sagiv, Mooly and Shoham, Sharon},
	title = {Ivy: Safety Verification by Interactive Generalization},
	year = {2016},
	isbn = {9781450342612},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/2908080.2908118},
	doi = {10.1145/2908080.2908118},
	abstract = { Despite several decades of research, the problem of formal verification of infinite-state systems has resisted effective automation. We describe a system --- Ivy --- for interactively verifying safety of infinite-state systems. Ivy's key principle is that whenever verification fails, Ivy graphically displays a concrete counterexample to induction. The user then interactively guides generalization from this counterexample. This process continues until an inductive invariant is found. Ivy searches for universally quantified invariants, and uses a restricted modeling language. This ensures that all verification conditions can be checked algorithmically. All user interactions are performed using graphical models, easing the user's task. We describe our initial experience with verifying several distributed protocols. },
	booktitle = {Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation},
	pages = {614–630},
	numpages = {17},
	keywords = {counterexamples to induction, invariant inference, distributed systems, safety verification},
	location = {Santa Barbara, CA, USA},
	series = {PLDI '16}
}
